global proc plfmaya_liggghts_part1()
{


//Initial Portion of the simulation

//***
//***//possible errors here - need to multiply by 10x (cm in Maya to m in liggghts)- should be fixed
//***

//Get simulation extents  SIMBOX1    
float $simMin[] = `getAttr SIMBOX1.boundingBoxMin`;
float $simMax[] = `getAttr SIMBOX1.boundingBoxMax`;

//Get tray/particle insertion extents  SIMTRAY

float $insMin[] = `getAttr SIMINS1.boundingBoxMin`;
float $insMax[] = `getAttr SIMINS1.boundingBoxMax`;

if (($insMax[2]+($insMax[2]-$insMin[2])) > $simMax[2])
{
  $simMax[2] = $insMax[2]+($insMax[2]-$insMin[2]);
}   

    
//open output file

$fileId = `fopen "setup.liggghts" "w"`;


//Enter text into outputfile

fprint $fileId ("#LIGGGHTS setup script generated with Maya->liggghts script v0.1 by Peter Falkingham\n");
fprint $fileId ("#----------SET UP FOLDER FOR OUTPUT----------#\n\nshell mkdir post\n\n#processors 1 1 1\n\n");

fprint $fileId ("#----------SYSTEM VARIABLES----------#\n\n#These are variables used later that get frequently altered\n\n");

fprint $fileId ("variable	r equal 0.001		# RADIUS of the particles (metres)\n");
fprint $fileId ("variable	E equal 5.0e7		# Young's modulus of particles (MPa)\n");
fprint $fileId ("variable	f equal 0.8		    # Coefficient of Friction (?)\n");
fprint $fileId ("variable	c equal 75000		# Cohesion energy density (?)\n");
fprint $fileId ("variable	d equal 1200		# Density of particles (Kg/m3)\n");
fprint $fileId ("variable	v equal 0.4		    # Poisson ratio\n");
fprint $fileId ("variable	s equal 0.000001		# time step size (seconds)\n");
fprint $fileId ("variable	t equal 1			# simultion time (seconds)\n");
fprint $fileId ("variable	n equal round($t/$s)	# number of steps to run\n\n");

fprint $fileId ("#----------SIMULATION SETTINGS----------#\n");
fprint $fileId ("# These are required for the simulation\n\n");

fprint $fileId ("units 		    si				# units are set to SI\n");
fprint $fileId ("atom_style     granular		# standard for DEM - NOTE THAT SPHERE ALSO WORKS\n");
fprint $fileId ("boundary	    f f f			    # Boundary s = non-periodic, shrinkwrapped, f = fixed\n");
fprint $fileId ("newton 	    off				# Turns newtons 3rd law on/off: on = slight computational savings, but 2x more communication\n");
fprint $fileId ("communicate	single vel yes	# standard processor communication settings\n\n");

fprint $fileId ("neighbor	$r bin			    #nearest neighbor course contact detection\n");
fprint $fileId ("neigh_modify	every 1 delay 0 check yes	#rebuild list every step, if checked.\n\n");

fprint $fileId ("region    domain block "+$simMin[0]+" "+$simMax[0]+" "+$simMin[1]+" "+$simMax[1]+" "+$simMin[2]+" "+$simMax[2]+" units box #SIMULATION DOMAIN\n");
fprint $fileId ("create_box 1 domain\n\n");

fprint $fileId ("#----------MATERIAL PROPERTIES----------#\n");
fprint $fileId ("# These determine the behaviour of the simulation\n");
fprint $fileId ("fix	m1 all property/global youngsModulus peratomtype $E\n");
fprint $fileId ("fix	m2 all property/global poissonsRatio peratomtype $v\n");
fprint $fileId ("fix	m3 all property/global coefficientRestitution peratomtypepair 1 0.9\n");
fprint $fileId ("fix 	m4 all property/global coefficientFriction peratomtypepair 1 $f\n");
fprint $fileId ("fix 	m5 all property/global characteristicVelocity scalar 1.0\n");
fprint $fileId ("fix 	m6 all property/global cohesionEnergyDensity peratomtypepair 1 $c\n\n");

fprint $fileId ("#----------PARTICLE INSERTION----------#\n");
fprint $fileId ("fix	pts1 all particletemplate/sphere 15485863 atom_type 1 density constant $d radius constant $r\n");
fprint $fileId ("fix	pdd1 all particledistribution/discrete 32452843  1 pts1 1.0\n");
fprint $fileId ("region ins_tray block "+$insMin[0]+" "+$insMax[0]+" "+$insMin[1]+" "+$insMax[1]+" "+$insMin[2]+" "+$insMax[2]+" units box\n");
fprint $fileId ("fix	ins all insert/pack seed 86028157 distributiontemplate pdd1 insert_every 10000 overlapcheck yes all_in yes region ins_tray volumefraction_region 0.6\n\n");

fprint $fileId ("#----------WALLS----------#\n");
fprint $fileId ("#Sets up the physical tray\n");
fprint $fileId ("fix    simtray all mesh/surface file simtray.stl type 1 \n"); //  This may need adding in future: rotate axis "+$ax+" "+$ay+" "+$az+" angle "+$ang+" move "+$tx+" "+$ty+" "+$tz+"\n");  //export SIMTRAY as simtray.stl
fprint $fileId ("fix    cont all wall/gran model hertz tangential history mesh n_meshes 1 meshes simtray\n\n"); 

fprint $fileId ("#----------FORCE MODEL----------#\n");
fprint $fileId ("# Takes the given material properties and applies them to all particles\n");
fprint $fileId ("pair_style	gran model hertz tangential history cohesion sjkr tangential_reduce on #:pre # hertzian with cohesion\n");
fprint $fileId ("pair_coeff	* * 			# applies this interaction to all particle pairs\n\n");


fprint $fileId ("#----------ADDITIONAL SETTINGS----------#\n");
fprint $fileId ("fix 		nsph all nve/sphere			# Initialises time integration\n");
fprint $fileId ("fix		gravi all gravity 9.81 vector 0.0 0.0 -1.0	#Gravity\n");
fprint $fileId ("timestep	$s\n\n");



//output (uncomment for bug-checking particle insertion)
//fprint $fileId ("dump dumpstl all stl 10000 post/dump*.vtk\n"); 
//fprint $fileId ("dump dmp all custom 10000 post/dump*.txt id type x y z radius\n\n");

//check time step
/// ---


fprint $fileId ("#----------COMPUTATION----------#\n");
fprint $fileId ("# sets up what will be computed\n");
fprint $fileId ("compute	rke all erotate/sphere\n");
fprint $fileId ("compute 	mudisp all displace/atom\n");

fprint $fileId ("#----------RUN SPECIFICS----------#\n");
fprint $fileId ("#Fill simtray\n");
fprint $fileId ("run 200000\n");
fprint $fileId ("unfix ins\n");
fprint $fileId ("run 100000\n");
//fprint $fileId ("undump dumpstl\n");
fprint $fileId ("unfix cont\n");
fprint $fileId ("unfix simtray\n");

fprint $fileId ("write_restart restart.res\n");


fclose $fileId;
}